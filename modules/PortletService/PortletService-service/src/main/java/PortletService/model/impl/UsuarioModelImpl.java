/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package PortletService.model.impl;

import PortletService.model.Usuario;
import PortletService.model.UsuarioModel;
import PortletService.model.UsuarioSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Usuario service. Represents a row in the &quot;USUARIO_Usuario&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UsuarioModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UsuarioImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UsuarioImpl
 * @generated
 */
@JSON(strict = true)
public class UsuarioModelImpl
	extends BaseModelImpl<Usuario> implements UsuarioModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a usuario model instance should use the <code>Usuario</code> interface instead.
	 */
	public static final String TABLE_NAME = "USUARIO_Usuario";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"usuarioId", Types.BIGINT},
		{"nombre", Types.VARCHAR}, {"apellidos", Types.VARCHAR},
		{"fechaNacimiento", Types.TIMESTAMP}, {"createDate", Types.TIMESTAMP},
		{"correo", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("usuarioId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nombre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("apellidos", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fechaNacimiento", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("correo", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table USUARIO_Usuario (uuid_ VARCHAR(75) null,usuarioId LONG not null primary key,nombre VARCHAR(75) null,apellidos VARCHAR(75) null,fechaNacimiento DATE null,createDate DATE null,correo VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table USUARIO_Usuario";

	public static final String ORDER_BY_JPQL = " ORDER BY usuario.nombre ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY USUARIO_Usuario.nombre ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NOMBRE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Usuario toModel(UsuarioSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Usuario model = new UsuarioImpl();

		model.setUuid(soapModel.getUuid());
		model.setUsuarioId(soapModel.getUsuarioId());
		model.setNombre(soapModel.getNombre());
		model.setApellidos(soapModel.getApellidos());
		model.setFechaNacimiento(soapModel.getFechaNacimiento());
		model.setCreateDate(soapModel.getCreateDate());
		model.setCorreo(soapModel.getCorreo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Usuario> toModels(UsuarioSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Usuario> models = new ArrayList<Usuario>(soapModels.length);

		for (UsuarioSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public UsuarioModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _usuarioId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUsuarioId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _usuarioId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Usuario.class;
	}

	@Override
	public String getModelClassName() {
		return Usuario.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Usuario, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Usuario, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Usuario, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Usuario)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Usuario, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Usuario, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Usuario)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Usuario, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Usuario, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Usuario>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Usuario.class.getClassLoader(), Usuario.class, ModelWrapper.class);

		try {
			Constructor<Usuario> constructor =
				(Constructor<Usuario>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Usuario, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Usuario, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Usuario, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Usuario, Object>>();
		Map<String, BiConsumer<Usuario, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Usuario, ?>>();

		attributeGetterFunctions.put("uuid", Usuario::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Usuario, String>)Usuario::setUuid);
		attributeGetterFunctions.put("usuarioId", Usuario::getUsuarioId);
		attributeSetterBiConsumers.put(
			"usuarioId", (BiConsumer<Usuario, Long>)Usuario::setUsuarioId);
		attributeGetterFunctions.put("nombre", Usuario::getNombre);
		attributeSetterBiConsumers.put(
			"nombre", (BiConsumer<Usuario, String>)Usuario::setNombre);
		attributeGetterFunctions.put("apellidos", Usuario::getApellidos);
		attributeSetterBiConsumers.put(
			"apellidos", (BiConsumer<Usuario, String>)Usuario::setApellidos);
		attributeGetterFunctions.put(
			"fechaNacimiento", Usuario::getFechaNacimiento);
		attributeSetterBiConsumers.put(
			"fechaNacimiento",
			(BiConsumer<Usuario, Date>)Usuario::setFechaNacimiento);
		attributeGetterFunctions.put("createDate", Usuario::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Usuario, Date>)Usuario::setCreateDate);
		attributeGetterFunctions.put("correo", Usuario::getCorreo);
		attributeSetterBiConsumers.put(
			"correo", (BiConsumer<Usuario, String>)Usuario::setCorreo);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getUsuarioId() {
		return _usuarioId;
	}

	@Override
	public void setUsuarioId(long usuarioId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_usuarioId = usuarioId;
	}

	@JSON
	@Override
	public String getNombre() {
		if (_nombre == null) {
			return "";
		}
		else {
			return _nombre;
		}
	}

	@Override
	public void setNombre(String nombre) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nombre = nombre;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNombre() {
		return getColumnOriginalValue("nombre");
	}

	@JSON
	@Override
	public String getApellidos() {
		if (_apellidos == null) {
			return "";
		}
		else {
			return _apellidos;
		}
	}

	@Override
	public void setApellidos(String apellidos) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_apellidos = apellidos;
	}

	@JSON
	@Override
	public Date getFechaNacimiento() {
		return _fechaNacimiento;
	}

	@Override
	public void setFechaNacimiento(Date fechaNacimiento) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fechaNacimiento = fechaNacimiento;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public String getCorreo() {
		if (_correo == null) {
			return "";
		}
		else {
			return _correo;
		}
	}

	@Override
	public void setCorreo(String correo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_correo = correo;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Usuario.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Usuario toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Usuario>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UsuarioImpl usuarioImpl = new UsuarioImpl();

		usuarioImpl.setUuid(getUuid());
		usuarioImpl.setUsuarioId(getUsuarioId());
		usuarioImpl.setNombre(getNombre());
		usuarioImpl.setApellidos(getApellidos());
		usuarioImpl.setFechaNacimiento(getFechaNacimiento());
		usuarioImpl.setCreateDate(getCreateDate());
		usuarioImpl.setCorreo(getCorreo());

		usuarioImpl.resetOriginalValues();

		return usuarioImpl;
	}

	@Override
	public Usuario cloneWithOriginalValues() {
		UsuarioImpl usuarioImpl = new UsuarioImpl();

		usuarioImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		usuarioImpl.setUsuarioId(
			this.<Long>getColumnOriginalValue("usuarioId"));
		usuarioImpl.setNombre(this.<String>getColumnOriginalValue("nombre"));
		usuarioImpl.setApellidos(
			this.<String>getColumnOriginalValue("apellidos"));
		usuarioImpl.setFechaNacimiento(
			this.<Date>getColumnOriginalValue("fechaNacimiento"));
		usuarioImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		usuarioImpl.setCorreo(this.<String>getColumnOriginalValue("correo"));

		return usuarioImpl;
	}

	@Override
	public int compareTo(Usuario usuario) {
		int value = 0;

		value = getNombre().compareTo(usuario.getNombre());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Usuario)) {
			return false;
		}

		Usuario usuario = (Usuario)object;

		long primaryKey = usuario.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Usuario> toCacheModel() {
		UsuarioCacheModel usuarioCacheModel = new UsuarioCacheModel();

		usuarioCacheModel.uuid = getUuid();

		String uuid = usuarioCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			usuarioCacheModel.uuid = null;
		}

		usuarioCacheModel.usuarioId = getUsuarioId();

		usuarioCacheModel.nombre = getNombre();

		String nombre = usuarioCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			usuarioCacheModel.nombre = null;
		}

		usuarioCacheModel.apellidos = getApellidos();

		String apellidos = usuarioCacheModel.apellidos;

		if ((apellidos != null) && (apellidos.length() == 0)) {
			usuarioCacheModel.apellidos = null;
		}

		Date fechaNacimiento = getFechaNacimiento();

		if (fechaNacimiento != null) {
			usuarioCacheModel.fechaNacimiento = fechaNacimiento.getTime();
		}
		else {
			usuarioCacheModel.fechaNacimiento = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			usuarioCacheModel.createDate = createDate.getTime();
		}
		else {
			usuarioCacheModel.createDate = Long.MIN_VALUE;
		}

		usuarioCacheModel.correo = getCorreo();

		String correo = usuarioCacheModel.correo;

		if ((correo != null) && (correo.length() == 0)) {
			usuarioCacheModel.correo = null;
		}

		return usuarioCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Usuario, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Usuario, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Usuario, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Usuario)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Usuario, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Usuario, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Usuario, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Usuario)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Usuario>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _usuarioId;
	private String _nombre;
	private String _apellidos;
	private Date _fechaNacimiento;
	private Date _createDate;
	private String _correo;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Usuario, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Usuario)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("usuarioId", _usuarioId);
		_columnOriginalValues.put("nombre", _nombre);
		_columnOriginalValues.put("apellidos", _apellidos);
		_columnOriginalValues.put("fechaNacimiento", _fechaNacimiento);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("correo", _correo);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("usuarioId", 2L);

		columnBitmasks.put("nombre", 4L);

		columnBitmasks.put("apellidos", 8L);

		columnBitmasks.put("fechaNacimiento", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("correo", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Usuario _escapedModel;

}